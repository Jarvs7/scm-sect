{"ast":null,"code":"var _jsxFileName = \"D:\\\\sistema-chamados\\\\frontend\\\\src\\\\components\\\\Relatorios\\\\Graficos.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport Chart from \"chart.js/auto\";\nimport '../../styles/Relatorio/graficos.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Graficos = ({\n  viagens = [],\n  estatisticas = {}\n}) => {\n  _s();\n  const chartViagensRef = useRef(null);\n  const chartMotoristasRef = useRef(null);\n  const [charts, setCharts] = useState({\n    viagens: null,\n    motoristas: null\n  });\n\n  // Inicializa estatísticas vazias para evitar erros\n  const estatisticasSeguras = {\n    porMotorista: [],\n    ...estatisticas\n  };\n  useEffect(() => {\n    // Destrói gráficos existentes antes de criar novos\n    if (charts.viagens) charts.viagens.destroy();\n    if (charts.motoristas) charts.motoristas.destroy();\n    if (viagens.length === 0 || !estatisticasSeguras.porMotorista) return;\n\n    // Processa dados para gráfico de viagens por dia\n    const dadosPorDia = viagens.reduce((acc, viagem) => {\n      const data = new Date(viagem.saida).toLocaleDateString();\n      acc[data] = (acc[data] || 0) + 1;\n      return acc;\n    }, {});\n\n    // Cria novo gráfico de viagens\n    const ctxViagens = chartViagensRef.current.getContext(\"2d\");\n    const novoChartViagens = new Chart(ctxViagens, {\n      type: \"line\",\n      data: {\n        labels: Object.keys(dadosPorDia),\n        datasets: [{\n          label: \"Viagens por Dia\",\n          data: Object.values(dadosPorDia),\n          borderColor: \"rgb(75, 188, 192)\"\n        }]\n      },\n      options: {\n        layout: {\n          padding: 20\n        },\n        plugins: {\n          legend: {\n            display: true,\n            labels: {\n              color: \"#ffffff\",\n              // Cor dos rótulos do eixo X\n              font: {\n                size: 20 // Tamanho da fonte dos rótulos do eixo X\n              }\n            }\n          }\n        },\n        scales: {\n          x: {\n            ticks: {\n              color: \"#ffffff\" // Cor branca para os rótulos do eixo X\n            },\n            grid: {\n              color: \"rgba(128, 128, 128, 0.3)\" // Cor cinza translúcida para as linhas de grade\n            }\n          },\n          y: {\n            ticks: {\n              color: \"#ffffff\" // Cor branca para os rótulos do eixo Y\n            },\n            grid: {\n              color: \"rgba(128, 128, 128, 0.3)\" // Cor cinza translúcida para as linhas de grade\n            }\n          }\n        }\n      }\n    });\n\n    // Cria novo gráfico de motoristas\n    const ctxMotoristas = chartMotoristasRef.current.getContext(\"2d\");\n    // Gera cores dinâmicas para cada motorista\n    const coresMotoristas = estatisticasSeguras.porMotorista.map(() => {\n      const r = Math.floor(Math.random() * 256);\n      const g = Math.floor(Math.random() * 256);\n      const b = Math.floor(Math.random() * 256);\n      return `rgb(${r}, ${g}, ${b})`;\n    });\n    const novoChartMotoristas = new Chart(ctxMotoristas, {\n      type: \"bar\",\n      data: {\n        labels: estatisticasSeguras.porMotorista.map(e => e.nome),\n        datasets: [{\n          label: \"Total de Viagens\",\n          data: estatisticasSeguras.porMotorista.map(e => e.total),\n          backgroundColor: coresMotoristas\n        }]\n      },\n      options: {\n        layout: {\n          padding: 20\n        },\n        plugins: {\n          legend: {\n            display: true,\n            labels: {\n              color: \"#ffffff\",\n              // Cor dos rótulos do eixo X\n              font: {\n                size: 20 // Tamanho da fonte dos rótulos do eixo X\n              }\n            }\n          }\n        },\n        scales: {\n          x: {\n            ticks: {\n              color: \"#ffffff\" // Cor branca para os rótulos do eixo X\n            },\n            grid: {\n              color: \"rgba(128, 128, 128, 0.3)\" // Cor cinza translúcida para as linhas de grade\n            }\n          },\n          y: {\n            ticks: {\n              color: \"#ffffff\" // Cor branca para os rótulos do eixo Y\n            },\n            grid: {\n              color: \"rgba(128, 128, 128, 0.3)\" // Cor cinza translúcida para as linhas de grade\n            }\n          }\n        }\n      }\n    });\n    setCharts({\n      viagens: novoChartViagens,\n      motoristas: novoChartMotoristas\n    });\n\n    // Limpeza ao desmontar\n    return () => {\n      if (novoChartViagens) novoChartViagens.destroy();\n      if (novoChartMotoristas) novoChartMotoristas.destroy();\n    };\n  }, [viagens, estatisticasSeguras.porMotorista]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row mb-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-md-6\",\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: chartViagensRef,\n        className: \"grafico-viagens\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-md-6\",\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: chartMotoristasRef,\n        className: \"grafico-motoristas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n};\n_s(Graficos, \"WjDS2M82Q2ekmCtX1JXiuR3hURA=\");\n_c = Graficos;\nexport default Graficos;\nvar _c;\n$RefreshReg$(_c, \"Graficos\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Chart","jsxDEV","_jsxDEV","Graficos","viagens","estatisticas","_s","chartViagensRef","chartMotoristasRef","charts","setCharts","motoristas","estatisticasSeguras","porMotorista","destroy","length","dadosPorDia","reduce","acc","viagem","data","Date","saida","toLocaleDateString","ctxViagens","current","getContext","novoChartViagens","type","labels","Object","keys","datasets","label","values","borderColor","options","layout","padding","plugins","legend","display","color","font","size","scales","x","ticks","grid","y","ctxMotoristas","coresMotoristas","map","r","Math","floor","random","g","b","novoChartMotoristas","e","nome","total","backgroundColor","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/sistema-chamados/frontend/src/components/Relatorios/Graficos.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport Chart from \"chart.js/auto\";\r\nimport '../../styles/Relatorio/graficos.css';\r\n\r\nconst Graficos = ({ viagens = [], estatisticas = {} }) => {\r\n  const chartViagensRef = useRef(null);\r\n  const chartMotoristasRef = useRef(null);\r\n  const [charts, setCharts] = useState({ viagens: null, motoristas: null });\r\n\r\n  // Inicializa estatísticas vazias para evitar erros\r\n  const estatisticasSeguras = {\r\n    porMotorista: [],\r\n    ...estatisticas\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Destrói gráficos existentes antes de criar novos\r\n    if (charts.viagens) charts.viagens.destroy();\r\n    if (charts.motoristas) charts.motoristas.destroy();\r\n\r\n    if (viagens.length === 0 || !estatisticasSeguras.porMotorista) return;\r\n\r\n    // Processa dados para gráfico de viagens por dia\r\n    const dadosPorDia = viagens.reduce((acc, viagem) => {\r\n      const data = new Date(viagem.saida).toLocaleDateString();\r\n      acc[data] = (acc[data] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    // Cria novo gráfico de viagens\r\n    const ctxViagens = chartViagensRef.current.getContext(\"2d\");\r\n    const novoChartViagens = new Chart(ctxViagens, {\r\n      type: \"line\",\r\n      data: {\r\n        labels: Object.keys(dadosPorDia),\r\n        datasets: [{\r\n          label: \"Viagens por Dia\", \r\n          data: Object.values(dadosPorDia),\r\n          borderColor: \"rgb(75, 188, 192)\"\r\n        }],\r\n      },\r\n      options: {\r\n        layout: {\r\n          padding: 20\r\n        },\r\n        plugins: {\r\n          legend: {\r\n            display: true,\r\n            labels: {\r\n              color: \"#ffffff\", // Cor dos rótulos do eixo X\r\n              font: {\r\n                size: 20 // Tamanho da fonte dos rótulos do eixo X\r\n              }\r\n            }\r\n          }\r\n        },\r\n        scales: {\r\n          x: {\r\n            ticks: {\r\n              color: \"#ffffff\" // Cor branca para os rótulos do eixo X\r\n            },\r\n            grid: {\r\n              color: \"rgba(128, 128, 128, 0.3)\" // Cor cinza translúcida para as linhas de grade\r\n            }\r\n          },\r\n          y: {\r\n            ticks: {\r\n              color: \"#ffffff\" // Cor branca para os rótulos do eixo Y\r\n            },\r\n            grid: {\r\n              color: \"rgba(128, 128, 128, 0.3)\" // Cor cinza translúcida para as linhas de grade\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    // Cria novo gráfico de motoristas\r\n    const ctxMotoristas = chartMotoristasRef.current.getContext(\"2d\");\r\n    // Gera cores dinâmicas para cada motorista\r\n    const coresMotoristas = estatisticasSeguras.porMotorista.map(() => {\r\n      const r = Math.floor(Math.random() * 256);\r\n      const g = Math.floor(Math.random() * 256);\r\n      const b = Math.floor(Math.random() * 256);\r\n      return `rgb(${r}, ${g}, ${b})`;\r\n    });\r\n    const novoChartMotoristas = new Chart(ctxMotoristas, {\r\n      type: \"bar\",\r\n      data: {\r\n        labels: estatisticasSeguras.porMotorista.map((e) => e.nome),\r\n        datasets: [{\r\n          label: \"Total de Viagens\",\r\n          data: estatisticasSeguras.porMotorista.map((e) => e.total),\r\n          backgroundColor: coresMotoristas,\r\n        }],\r\n      },\r\n      options: {\r\n        layout: {\r\n          padding: 20\r\n        },\r\n        plugins: {\r\n          legend: {\r\n            display: true,\r\n            labels: {\r\n              color: \"#ffffff\", // Cor dos rótulos do eixo X\r\n              font: {\r\n                size: 20 // Tamanho da fonte dos rótulos do eixo X\r\n              }\r\n            }\r\n          }\r\n        },\r\n        scales: {\r\n          x: {\r\n            ticks: {\r\n              color: \"#ffffff\" // Cor branca para os rótulos do eixo X\r\n            },\r\n            grid: {\r\n              color: \"rgba(128, 128, 128, 0.3)\" // Cor cinza translúcida para as linhas de grade\r\n            }\r\n          },\r\n          y: {\r\n            ticks: {\r\n              color: \"#ffffff\" // Cor branca para os rótulos do eixo Y\r\n            },\r\n            grid: {\r\n              color: \"rgba(128, 128, 128, 0.3)\" // Cor cinza translúcida para as linhas de grade\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    setCharts({\r\n      viagens: novoChartViagens,\r\n      motoristas: novoChartMotoristas\r\n    });\r\n\r\n    // Limpeza ao desmontar\r\n    return () => {\r\n      if (novoChartViagens) novoChartViagens.destroy();\r\n      if (novoChartMotoristas) novoChartMotoristas.destroy();\r\n    };\r\n  }, [viagens, estatisticasSeguras.porMotorista]);\r\n\r\n  return (\r\n    <div className=\"row mb-4\">\r\n      <div className=\"col-md-6\">\r\n        <canvas ref={chartViagensRef} className=\"grafico-viagens\"></canvas>\r\n      </div>\r\n      <div className=\"col-md-6\">\r\n        <canvas ref={chartMotoristasRef} className=\"grafico-motoristas\"></canvas>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Graficos;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}