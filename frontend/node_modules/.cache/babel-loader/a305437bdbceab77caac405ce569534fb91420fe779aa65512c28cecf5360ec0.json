{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { toast } from \"react-toastify\";\nimport { carregarDados, finalizarViagem, getSocket } from \"../components/Status/services/viagemService\";\nconst useViagemData = () => {\n  _s();\n  const [dados, setDados] = useState({\n    estatisticas: {\n      totalViagens: 0,\n      viagensFinalizadas: 0,\n      viagensEmAndamento: 0\n    },\n    viagens: [],\n    motoristas: [],\n    veiculos: [],\n    _initialized: false\n  });\n  const [loading, setLoading] = useState(false);\n  const loadData = async () => {\n    try {\n      setLoading(true);\n      const data = await carregarDados();\n      setDados({\n        estatisticas: data.estatisticas || {},\n        viagens: data.viagens || [],\n        motoristas: Array.isArray(data.motoristas) ? data.motoristas : [],\n        veiculos: Array.isArray(data.veiculos) ? data.veiculos : [],\n        _initialized: true\n      });\n    } catch (error) {\n      console.error(\"Erro ao carregar dados:\", error);\n      toast.error(\"Erro ao carregar dados\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    loadData(); // carregamento inicial\n    const socket = getSocket();\n\n    // Atualização em tempo real via socket\n    socket.on(\"atualizacao_viagens\", data => {\n      setDados(prev => ({\n        ...prev,\n        viagens: data.viagens || prev.viagens,\n        estatisticas: data.estatisticas || prev.estatisticas,\n        motoristas: data.motoristas || prev.motoristas,\n        veiculos: data.veiculos || prev.veiculos\n      }));\n    });\n    return () => socket.off(\"atualizacao_viagens\");\n  }, []);\n  return {\n    dados,\n    setDados,\n    loading,\n    setLoading,\n    loadData,\n    finalizarViagem\n  };\n};\n_s(useViagemData, \"mxEywIkE5qLvHMoBqxqzY4PWFbo=\");\nexport default useViagemData;","map":{"version":3,"names":["useEffect","useState","toast","carregarDados","finalizarViagem","getSocket","useViagemData","_s","dados","setDados","estatisticas","totalViagens","viagensFinalizadas","viagensEmAndamento","viagens","motoristas","veiculos","_initialized","loading","setLoading","loadData","data","Array","isArray","error","console","socket","on","prev","off"],"sources":["D:/sistema-chamados/frontend/src/hooks/useViagemData.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport {\r\n  carregarDados,\r\n  finalizarViagem,\r\n  getSocket,\r\n} from \"../components/Status/services/viagemService\";\r\n\r\nconst useViagemData = () => {\r\n  const [dados, setDados] = useState({\r\n    estatisticas: {\r\n      totalViagens: 0,\r\n      viagensFinalizadas: 0,\r\n      viagensEmAndamento: 0,\r\n    },\r\n    viagens: [],\r\n    motoristas: [],\r\n    veiculos: [],\r\n    _initialized: false\r\n  });\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const loadData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const data = await carregarDados();\r\n\r\n      setDados({\r\n        estatisticas: data.estatisticas || {},\r\n        viagens: data.viagens || [],\r\n        motoristas: Array.isArray(data.motoristas) ? data.motoristas : [],\r\n        veiculos: Array.isArray(data.veiculos) ? data.veiculos : [],\r\n        _initialized: true\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Erro ao carregar dados:\", error);\r\n      toast.error(\"Erro ao carregar dados\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadData(); // carregamento inicial\r\n    const socket = getSocket();\r\n\r\n    // Atualização em tempo real via socket\r\n    socket.on(\"atualizacao_viagens\", (data) => {\r\n      setDados((prev) => ({\r\n        ...prev,\r\n        viagens: data.viagens || prev.viagens,\r\n        estatisticas: data.estatisticas || prev.estatisticas,\r\n        motoristas: data.motoristas || prev.motoristas,\r\n        veiculos: data.veiculos || prev.veiculos,\r\n      }));\r\n    });\r\n\r\n    return () => socket.off(\"atualizacao_viagens\");\r\n  }, []);\r\n\r\n  return {\r\n    dados,\r\n    setDados,\r\n    loading,\r\n    setLoading,\r\n    loadData,\r\n    finalizarViagem,\r\n  };\r\n};\r\n\r\nexport default useViagemData;\r\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,KAAK,QAAQ,gBAAgB;AACtC,SACEC,aAAa,EACbC,eAAe,EACfC,SAAS,QACJ,6CAA6C;AAEpD,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC;IACjCS,YAAY,EAAE;MACZC,YAAY,EAAE,CAAC;MACfC,kBAAkB,EAAE,CAAC;MACrBC,kBAAkB,EAAE;IACtB,CAAC;IACDC,OAAO,EAAE,EAAE;IACXC,UAAU,EAAE,EAAE;IACdC,QAAQ,EAAE,EAAE;IACZC,YAAY,EAAE;EAChB,CAAC,CAAC;EAEF,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;EAE7C,MAAMmB,QAAQ,GAAG,MAAAA,CAAA,KAAY;IAC3B,IAAI;MACFD,UAAU,CAAC,IAAI,CAAC;MAChB,MAAME,IAAI,GAAG,MAAMlB,aAAa,CAAC,CAAC;MAElCM,QAAQ,CAAC;QACPC,YAAY,EAAEW,IAAI,CAACX,YAAY,IAAI,CAAC,CAAC;QACrCI,OAAO,EAAEO,IAAI,CAACP,OAAO,IAAI,EAAE;QAC3BC,UAAU,EAAEO,KAAK,CAACC,OAAO,CAACF,IAAI,CAACN,UAAU,CAAC,GAAGM,IAAI,CAACN,UAAU,GAAG,EAAE;QACjEC,QAAQ,EAAEM,KAAK,CAACC,OAAO,CAACF,IAAI,CAACL,QAAQ,CAAC,GAAGK,IAAI,CAACL,QAAQ,GAAG,EAAE;QAC3DC,YAAY,EAAE;MAChB,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOO,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/CtB,KAAK,CAACsB,KAAK,CAAC,wBAAwB,CAAC;IACvC,CAAC,SAAS;MACRL,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAEDnB,SAAS,CAAC,MAAM;IACdoB,QAAQ,CAAC,CAAC,CAAC,CAAC;IACZ,MAAMM,MAAM,GAAGrB,SAAS,CAAC,CAAC;;IAE1B;IACAqB,MAAM,CAACC,EAAE,CAAC,qBAAqB,EAAGN,IAAI,IAAK;MACzCZ,QAAQ,CAAEmB,IAAI,KAAM;QAClB,GAAGA,IAAI;QACPd,OAAO,EAAEO,IAAI,CAACP,OAAO,IAAIc,IAAI,CAACd,OAAO;QACrCJ,YAAY,EAAEW,IAAI,CAACX,YAAY,IAAIkB,IAAI,CAAClB,YAAY;QACpDK,UAAU,EAAEM,IAAI,CAACN,UAAU,IAAIa,IAAI,CAACb,UAAU;QAC9CC,QAAQ,EAAEK,IAAI,CAACL,QAAQ,IAAIY,IAAI,CAACZ;MAClC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;IAEF,OAAO,MAAMU,MAAM,CAACG,GAAG,CAAC,qBAAqB,CAAC;EAChD,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IACLrB,KAAK;IACLC,QAAQ;IACRS,OAAO;IACPC,UAAU;IACVC,QAAQ;IACRhB;EACF,CAAC;AACH,CAAC;AAACG,EAAA,CA7DID,aAAa;AA+DnB,eAAeA,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}